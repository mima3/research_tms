"""
This type stub file was generated by pyright.
"""

from functools import lru_cache as cache

class Backend:
    """
    Facilitates RPC communications with the backend and implements
    behavior described at:
    http://kiwitcms.org/blog/atodorov/2018/11/05/test-runner-plugin-specification/

    This class is intended to be used by Kiwi TCMS plugins implemented in
    Python. The plugin will call::

        backend = Backend()
        backend.configure()

        ... parse test results ...

        test_case_id, _ = backend.test_case_get_or_create(<description>)
        backend.add_test_case_to_plan(test_case_id, backend.plan_id)
        test_executions = backend.add_test_case_to_run(test_case_id,
                                                       backend.run_id)
        for execution in test_executions:
            backend.update_test_execution(execution['id'],
                                          <status_id>,
                                          <comment>)

    :param prefix: Prefix which will be added to TestPlan.name and
                   TestRun.summary

                   .. versionadded:: 5.2
    :type prefix: str
    """
    _statuses = ...
    name = ...
    version = ...
    @property
    def prefix(self): # -> str:
        """
        Prefix may be overriden via ``TCMS_PREFIX`` environment variable.

        .. versionadded:: 11.2
        """
        ...
    
    def __init__(self, prefix=..., verbose=...) -> None:
        """
        :param prefix: Prefix which will be added to TestPlan.name and
                       TestRun.summary

                       .. versionadded:: 5.2
        :type prefix: str
        :param verbose: If ``True`` will print info about created records.
                        Defaults to ``False``

                       .. versionadded:: 11.3
        :type verbose: bool
        """
        ...
    
    def log_info(self, was_created, obj_prefix, obj_id): # -> None:
        ...
    
    def configure(self): # -> None:
        """
        This method is reading all the configs from the environment
        and will create necessary TestPlan and TestRun containers!

        One of the main reasons for it is that
        :py:attr:`tcms_api.tcms_api.TCMS.exec` will try to connect
        immediately to Kiwi TCMS!

        .. important::

            Test runner plugins **must** call this method after
            initializing the backend object and **before** calling
            any of the other methods!
        """
        ...
    
    def get_statuses_by_weight(self, lookup_condition): # -> _Marshallable:
        """
        Get a list of statuses based on lookup condition.

        :param lookup_condition: ``tcms.testruns.models.TestExecutionStatus``
           lookup condition
        :type lookup_condition: dict
        :rtype: list
        """
        ...
    
    def get_status_id_fallback(self, name): # -> str | Any:
        """
        Get status based on weight if name not found

        :param name: ``tcms.testruns.models.TestExecutionStatus`` name
        :type name: str
        :rtype: int
        """
        ...
    
    def get_status_id(self, name):
        """
        Get the PK of ``tcms.testruns.models.TestExecutionStatus``
        matching the test execution status name or fallback based on
        weight.

        .. important::

            Test runner plugins **must** call this method like so::

                id = backend.get_status_id('FAILED')

        :param name: ``tcms.testruns.models.TestExecutionStatus`` name
        :type name: str
        :rtype: int
        """
        ...
    
    def get_product_id(self, plan_id): # -> tuple[Any | str, Any | str]:
        """
        Return a ``tcms.management.models.Product`` PK.

        .. warning::

            For internal use by `.configure()`!

        :param plan_id: ``tcms.testplans.models.TestPlan`` PK
        :type plan_id: int
        :rtype: int

        Order of precedence:

        - `plan_id` is specified, then use TestPlan.product, otherwise
        - use `$TCMS_PRODUCT` as Product.name if specified, otherwise
        - use `$TRAVIS_REPO_SLUG` as Product.name if specified, otherwise
        - use `$JOB_NAME` as Product.name if specified

        If Product doesn't exist in the database it will be created with
        the first ``tcms.management.models.Classification`` found!
        """
        ...
    
    def get_version_id(self, product_id): # -> tuple[Any | str, str]:
        """
        Return a ``tcms.management.models.Version`` (PK, name).

        .. warning::

            For internal use by `.configure()`!

        :param product_id: ``tcms.management.models.Product`` PK
                           for which to look for Version
        :type product_id: int
        :return: (version_id, version_value)
        :rtype: tuple(int, str)

        Order of precedence:

        - use `$TCMS_PRODUCT_VERSION` as Version.value if specified, or
        - use `$TRAVIS_COMMIT` as Version.value if specified, otherwise
        - use `$TRAVIS_PULL_REQUEST_SHA` as Version.value if specified,
          otherwise
        - use `$GIT_COMMIT` as Version.value if specified

        If Version doesn't exist in the database it will be created with
        the specified `product_id`!
        """
        ...
    
    def get_build_id(self, version_id): # -> tuple[Any | str, str]:
        """
        Return a ``tcms.management.models.Build`` (PK, name).

        .. warning::

            For internal use by `.configure()`!

        :param version_id: ``tcms.management.models.Version`` PK
                           for which to look for Build
        :type version_id: int
        :return: (build_id, build_name)
        :rtype: tuple(int, str)

        Order of precedence:

        - use `$TCMS_BUILD` as Build.name if specified, otherwise
        - use `$TRAVIS_BUILD_NUMBER` as Build.name if specified, otherwise
        - use `$BUILD_NUMBER` as Build.name if specified

        If Build doesn't exist in the database it will be created with the
        specified `version_id`!
        """
        ...
    
    def get_plan_type_id(self): # -> str | Any:
        """
        Return an **Integration** PlanType.

        .. warning::

            For internal use by `.configure()`!

        :return: ``tcms.testplans.models.PlanType`` PK
        :rtype: int
        """
        ...
    
    def external_plan_id(self): # -> str | int:
        """
        Allows the user to specify `$TCMS_PLAN_ID` to point to an existing
        TestPlan where new runs will be added!

        .. warning::

            Does not check if the specified TP exists!

        :return: ``tcms.testplans.models.TestPlan`` PK or 0
        :rtype: int
        """
        ...
    
    @property
    @cache(maxsize=128)
    def default_tester_id(self): # -> str | None:
        """
        Used internally and by default this is the user sending the API
        request. Use `$TCMS_DEFAULT_TESTER_ID` to override!

        Plugins may want to override this.

        :return: User ID
        :rtype: int
        """
        ...
    
    def get_plan_id(self, run_id): # -> str | int | Any:
        """
        If a TestRun with PK `run_id` exists then return the TestPlan to
        which this TestRun is assigned, otherwise create new TestPlan with
        Product and Version specified by environment variables.

        .. warning::

            For internal use by `.configure()`!

        If ``TCMS_PARENT_PLAN`` environment variable is specified and a new
        TestPlan is created then it will be created as a child TP.

        .. versionadded:: 11.2

        :param run_id: ``tcms.testruns.models.TestRun`` PK
        :type run_id: int
        :return: ``tcms.testplans.models.TestPlan`` PK
        :rtype: int
        """
        ...
    
    def get_run_id(self): # -> int:
        """
        If `$TCMS_RUN_ID` is specified then assume the caller knows
        what they are doing and try to add test results to that TestRun.
        Otherwise will create a TestPlan and TestRun in which to record
        the results!

        .. warning::

            For internal use by `.configure()`!

        :return: ``tcms.testruns.models.TestRun`` PK
        :rtype: int
        """
        ...
    
    def finish_test_run(self): # -> None:
        """
        .. important::

            Test runner plugins **may** call this method!

        May be called at the end when there are no more test executions to
        be sent to Kiwi TCMS. Default implementation will update
        ``TR.stop_date``.

        :return: None
        """
        ...
    
    def test_case_get_or_create(self, summary): # -> tuple[_Marshallable | Any, bool]:
        """
        Search for a TestCase with the specified `summary` and Product.
        If it doesn't exist in the database it will be created!

        .. important::

            Test runner plugins **must** call this method!

        :param summary: A TestCase summary
        :type summary: str
        :return: Serialized ``tcms.testcase.models.TestCase`` and boolean
                 flag to indicate if the TestCase has just been created!
        :rtype: (dict, bool)
        """
        ...
    
    def add_test_case_to_plan(self, case_id, plan_id): # -> None:
        """
        Add a TestCase to a TestPlan if it is not already there!

        .. important::

            Test runner plugins **must** call this method!

        :param case_id: ``tcms.testcases.models.TestCase`` PK
        :type case_id: int
        :param plan_id: ``tcms.testplans.models.TestPlan`` PK
        :type plan_id: int
        :return: None
        """
        ...
    
    def add_test_case_to_run(self, case_id, run_id): # -> list[bool | int | float | str | bytes | bytearray | tuple[_Marshallable, ...] | dict[str, Any] | datetime | DateTime | Binary | None] | list[Any]:
        """
        Add a TestCase to a TestRun if it is not already there!

        .. important::

            Test runner plugins **must** call this method!

        :param case_id: ``tcms.testcases.models.TestCase`` PK
        :type case_id: int
        :param run_id: ``tcms.testruns.models.TestRun`` PK
        :type run_id: int
        :return: List of serialized ``tcms.testruns.models.TestExecution``
            objects
        :rtype: list(dict)
        """
        ...
    
    def update_test_execution(self, test_execution_id, status_id, comment=..., start_date=..., stop_date=...): # -> None:
        """
        Update TestExecution with a status and comment.

        .. important::

            Test runner plugins **must** call this method!

        :param test_execution_id: ``tcms.testruns.models.TestExecution`` PK
        :type test_execution_id: int
        :param status_id: ``tcms.testruns.models.TestExecutionStatus`` PK,
                          for example the ID for PASSED, FAILED, etc.
        :type status_id: int
        :param comment: the string to add as a comment, defaults to None
        :type comment: str
        :param start_date: when execution began, default None
        :type start_date: datetime
        :param stop_date: when execution completed, default None
        :type stop_date: datetime
        :return: None
        """
        ...
    
    def add_comment(self, test_execution_id, comment): # -> None:
        """
        Add comment string to TestExecution without changing the status

        .. important::

            Test runner plugins **must** call this method!

        :param test_execution_id: ``tcms.testruns.models.TestExecution`` PK
        :type test_execution_id: int
        :param comment: the string to add as a comment
        :type comment: str
        :return: None
        """
        ...
    
    @property
    def created_by_text(self): # -> str:
        ...
    


