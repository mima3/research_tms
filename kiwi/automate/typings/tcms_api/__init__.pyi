"""
This type stub file was generated by pyright.
"""

import os
from configparser import ConfigParser
from datetime import datetime, timedelta
from distutils.util import strtobool
from tcms_api.xmlrpc import TCMSKerbXmlrpc, TCMSXmlrpc

"""
This module provides a dictionary based Python interface for the
Kiwi TCMS test management system. It operates via the XML-RPC protocol.


Installation::

    pip install tcms-api


If you want to use Kerberos then::

    pip install tcms-api[gssapi]

**WARNING:** on Windows you need to install MIT Kerberos and make sure
``C:\\Program Files\\MIT\\Kerberos\\bin`` is included in ``%PATH%`` -
this is usually the case when you install and restart! It must be
a 64bit installation, see
`MIT Kerberos for Windows 4.1 <https://web.mit.edu/kerberos/dist/index.html#kfw-4.1>`_

**WARNING:** on Linux you will need gcc, Python and kerberos devel packages to
build ``gssapi`` because it doesn't provide binary packages via PyPI. Try
``dnf install gcc krb5-devel python3-devel`` (Red Hat/Fedora) or
``apt-get install gcc libkrb5-dev libpython3-dev`` (Debian/Ubuntu).


Minimal config file ``~/.tcms.conf``::

    [tcms]
    url = https://tcms.server/xml-rpc/
    username = your-username
    password = your-password

For Kerberos specify the ``use_kerberos = True`` key without username
and password! Also make sure that your ``/etc/krb5.conf`` contains::

    [libdefaults]
    default_realm = .EXAMPLE.COM

where ``EXAMPLE.COM`` matches the realm in your organization.


.. important::

    The filename ``~/.tcms.conf`` is expanded to something like
    ``/home/tcms-bot/.tcms.conf`` on Linux and
    ``C:\\Users\\tcms-bot\\.tcms.conf`` on Windows, where ``tcms-bot``
    is the username on the local computer.

    It's also possible to provide system-wide config in ``/etc/tcms.conf``
    on Linux and ``C:\\tcms.conf`` on Windows!

    Execute the following Python snippet to find the exact location on your
    system::

        import os
        print(os.path.expanduser('~/.tcms.conf'))

Connect to backend::

    from tcms_api import TCMS

    rpc = TCMS().exec

    for test_case in rpc.TestCase.filter({'pk': 46490}):
        print(test_case)


After tcms-api v13.2 you can pass connection configuration directly as
arguments when initializing the TCMS() class::

    TCMS("https://kiwitcms.example.com/xml-rpc/", "api-bot", "keep-me-secret").exec


.. important::

    For a list of available RPC methods see
    https://kiwitcms.readthedocs.io/en/latest/modules/tcms.rpc.api.html

    Example(s) and API scripts contributed by the Kiwi TCMS community
    can be found at https://github.com/kiwitcms/api-scripts. You are welcome
    to open a pull request with your own examples!

"""
class _ConnectionProxy:
    def __init__(self, config) -> None:
        ...
    
    @staticmethod
    def server_url(config):
        """
        Returns the server URL and performs various sanity checks!
        """
        ...
    
    def create_connection(self): # -> TCMSProxy:
        ...
    
    def __getattr__(self, name): # -> _Method:
        """
        refresh the connection every 4 minutes to avoid an
        `ssl.SSLEOFError: EOF occurred in violation of protocol` error with Python >= 3.10
        In practice I've discovered that 5 minutes works as well, 6 minutes fails so
        be more cautious and refresh the connection earlier!

        Side note: originally I thought this is related to calling
        context.set_alpn_protocols(['http/1.1']) inside http/client.py, introduced in
        https://github.com/python/cpython/commit/f97406be4c0a02c1501c7ab8bc8ef3850eddb962
        but that doesn't seem to be the case (or is much harder for me to debug)!
        """
        ...
    


class TCMS:
    """
    Takes care of initiating the connection to the TCMS server and
    parses user configuration using a utilities class!
    """
    def __init__(self, url=..., username=..., password=...) -> None:
        ...
    
    @property
    def exec(self): # -> _ConnectionProxy:
        """
        Property that returns the underlying XML-RPC connection on which
        you can call various server-side functions.

        .. important::

            Call this property once and assign it to a temporary variable as
            shown in the examples above. Then use the ``rpc`` variable to
            access the different RPC methods!

            Starting with tcms-api v12.9.1 this property is automatically refreshed
            every 4 minutes to avoid SSL connection timeout errors!
        """
        ...
    


